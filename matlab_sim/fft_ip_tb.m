%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %{tool}
% file : fft_ip_tb.m
%
% Description : The following Matlab testbench excercises the Altera FFT Model fft_ip_model.m
% generated by Altera's FFT Megacore and outputs results to text files.
%
% 2001-2009 Altera Corporation, All Rights Reserved
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameterization Space  
clc;clear;close all;
N=128;
% Read input complex vector from source text files
fidr = fopen('fft_core_real_input.txt','r');                                            
fidi = fopen('fft_core_imag_input.txt','r');                                           
xreali=fscanf(fidr,'%d');                                                    
ximagi=fscanf(fidi,'%d');                                                    
fclose(fidi);                                                                  
fclose(fidr);                                                                
% Create input complex row vector from source text files 
x = xreali' + j*ximagi';                                                        
[y, exp_out] = fft_ip_model(x,N,1); 
fidro = fopen('fft_core_real_output_c_model.txt','w');                                 
fidio = fopen('fft_core_imag_output_c_model.txt','w');                                  
fideo = fopen('fft_core_exponent_out_c_model.txt','w');                                 
fprintf(fidro,'%d\n',real(y));                                                
fprintf(fidio,'%d\n',imag(y));                                                
fprintf(fideo,'%d\n',exp_out);                                               
fclose(fidro);                                                                
fclose(fidio);                                                              
fclose(fideo);    


ifft_matlab_out = ifft(x,N);
ifft_fpga_out = y(1:N).*(2.^(-exp_out(1:N)))/N;
error = ifft_fpga_out - ifft_matlab_out;
n = 1:N;
figure(); plot(n,ifft_matlab_out,'b');    grid on;  xlabel('ifft matlab out'); ylabel('幅值');
figure(); plot(n,ifft_fpga_out(1:N),'b'); grid on;  xlabel('ifft fpga out'); ylabel('幅值');
figure(); plot(n,error,'r');              grid on;  xlabel('error'); ylabel('幅值');

% figure(); plot(n,ifft_matlab_out,'b');
% hold on; plot(n,ifft_fpga_out(1:N),'y');
% hold on; plot(n,error,'r');  
% legend('matlab out','fpga out','error');
% grid on;  xlabel('n'); ylabel('幅值');

fft_matlab_out = fft(ifft_matlab_out,N);
[fft_fpga_out, fft_exp_out] = fft_ip_model(y(1:N),N,0); 
fft_matga_out = fft(y(1:N),N)/2^3;
% error = fft_fpga_out - fft_matga_out;

% error = fft_fpga_out - x(1:N).*2;
% figure(); plot(n,real(x(1:N).*2),'b');       grid on;  xlabel('原数据虚部'); ylabel('幅值');
% figure(); plot(n,real(fft_fpga_out),'b');    grid on;  xlabel('输出数据虚部'); ylabel('幅值');
% figure(); plot(n,real(error),'r');           grid on;  xlabel('error'); ylabel('幅值');

% figure(); plot(n,ifft_matlab_out,'b');
% hold on; plot(n,ifft_fpga_out(1:N),'y');
% hold on; plot(n,error,'r');  
% legend('matlab out','fpga out','error');
% grid on;  xlabel('n'); ylabel('幅值');
real_cnt = 0; imag_cnt = 0;
real_out = zeros(1,N); imag_out = zeros(1,N);
for cnt=1:N
    if(real(fft_fpga_out(cnt)) < -4)
        real_out(cnt) = -3;
    elseif(real(fft_fpga_out(cnt)) >= -4 && real(fft_fpga_out(cnt)) < 0)
        real_out(cnt) = -1;
    elseif(real(fft_fpga_out(cnt)) >= 0 && real(fft_fpga_out(cnt)) < 4)
        real_out(cnt) = 1; 
    elseif(real(fft_fpga_out(cnt)) >= 4)
        real_out(cnt) = 3;
    end
    
    if(imag(fft_fpga_out(cnt)) < -4)
        imag_out(cnt) = -3;
    elseif(imag(fft_fpga_out(cnt)) >= -4 && imag(fft_fpga_out(cnt)) < 0)
        imag_out(cnt) = -1;
    elseif(imag(fft_fpga_out(cnt)) >= 0 && imag(fft_fpga_out(cnt)) < 4)
        imag_out(cnt) = 1; 
    elseif(imag(fft_fpga_out(cnt)) >= 4)
        imag_out(cnt) = 3;
    end
    
    if(real_out(cnt) ~= real(x(cnt)))
        real_cnt = real_cnt + 1;
    end
    if(imag_out(cnt) ~= imag(x(cnt)))
        imag_cnt = imag_cnt + 1;
    end
end

real_error = real_cnt/N;
imag_error = imag_cnt/N;

