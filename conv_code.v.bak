//(n,k,N)=(2,1,3)卷积码,生成矩阵g0=111,g1=101
//码率=1/2,约束长度为3
//未加删余,可使用无删余卷积编码，2/3码率删余卷积编码，3/4码率删余卷积编码
module conv_code(clk, reset, data_in, data_out, conv_out_valid);
input clk;				//100MHz 
input reset;		   // 异步复位，低电平有效
input data_in;
output reg data_out;
output reg conv_out_valid; //置高表示编码后的数据开始输出

wire clk_mul2;     	 //二倍频
pll_mul2 pll_mul2_m
(
	.areset(~reset),
	.inclk0(clk),
	.c0(clk_mul2),
	.locked()
);

reg [2:1] shift_reg;  //编码移位寄存器
reg [1:0] enc_reg;    //编码输出寄存器

parameter [3:0] indata_reg_len = 4; //输入数据寄存器长度
reg [indata_reg_len:1] indata_reg;  //输入数据寄存器

reg [3:0] conv_out_cnt;
always @(posedge clk or negedge reset) begin
	if(!reset) begin
		conv_out_cnt <= 0;
		conv_out_valid <= 0;
	end
	else begin
		conv_out_cnt <= conv_out_cnt + 1'b1;
		if(conv_out_cnt == indata_reg_len+1'b1)
			conv_out_valid <= 1'b1;
	end
end

always @(posedge clk or negedge reset) begin
	if(!reset)
		indata_reg <= 0;
	else begin
		indata_reg[indata_reg_len:1] <= {indata_reg[indata_reg_len-1:1], data_in};
	end
end

always@(posedge clk_mul2 or negedge reset)
begin
	if(!reset)
		data_out <= 0;
	else begin
		//输出时B在前,A在后
		if(clk)
			data_out <= enc_reg[1];
		else
			data_out <= enc_reg[0];
	end
end

always@(posedge clk or negedge reset)
begin 
	if(!reset) begin
		shift_reg <= 2'b00;
		enc_reg <= 2'b00;
	end
	else begin
		enc_reg[0] <= indata_reg[indata_reg_len] + shift_reg[1] + shift_reg[2];	  //数据A多项式：g0(x) = 1 + x + x^2
		enc_reg[1] <= indata_reg[indata_reg_len] + shift_reg[2]; 	              //数据B多项式：g1(x) = 1 + x^2
		shift_reg <= {shift_reg[1], indata_reg[indata_reg_len]};
	end
end

endmodule
